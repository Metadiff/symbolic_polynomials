#array_layout = "Block"                      # [Block|Visual] Indent on arrays
#array_width = 60                            # (60) Maximum width of an array literal before falling back to vertical formatting
#chain_indent = "Block"                      # [Block|Visual] Indentation of chain
#chain_one_line_max = 6                      # (6) Maximum length of a chain to fit on a single line
#chain_split_single_child = false            # [true|false] Split a chain with a single child if its length exceeds chain_one_line_max.
#closure_block_indent_threshold = 7          # How many lines a closure must have before it is block indented. -1 means never use block indent.
#combine_control_expr = true                 # [true|false] Combine control expressions with function calls.
#comment_width = 80                          # (80) Maximum length of comments. No effect unlesswrap_comments = true.
#condense_wildcard_suffixes = false          # [true|false] Replace strings of _ wildcards by a single .. in tuple patterns
control_style = "Legacy"                    # [Rfc|Legacy] Indent style for control flow statements
control_brace_style = "AlwaysSameLine"      # [AlwaysNextLine|AlwaysSameLine|ClosingNextLine] Brace style for control flow constructs
#disable_all_formatting = false              # [true|false] Don't reformat anything
#error_on_line_overflow = true               # [true|false] Error if unable to get all lines within max_width
#fn_args_density = "Tall"                    # [Compressed|CompressedIfEmpty|Tall|Vertical] Argument density in functions
fn_args_layout = "Visual"                    # [Block|Visual] Layout of function arguments and tuple structs
#fn_args_paren_newline = false               # [true|false] If function argument parenthesis goes on a newline
fn_brace_style = "PreferSameLine"           # [AlwaysNextLine|PreferSameLine|SameLineWhere] Brace style for functions
#fn_call_style = "Block"                     # [Block|Visual] Indentation for function calls, etc.
fn_call_width = 80                          # (60) Maximum width of the args of a function call before falling back to vertical formatting
#fn_empty_single_line = true                 # [true|false] Put empty-body functions on a single line
#fn_return_indent = "WithArgs"               # [WithArgs|WithWhereClause] Location of return type in function declaration
#fn_single_line = false                      # [true|false] Put single-expression functions on a single line
#force_explicit_abi = true                   # [true|false] Always print the abi for extern items
#force_format_strings = false                # [true|false] Always format string literals
format_strings = true                       # [true|false] Format string literals where necessary
generics_indent = "Visual"                  # [Block|Visual] Indentation of generics
#hard_tabs = false                           # [true|false] Use tab characters for indentation, spaces for alignment
#impl_empty_single_line = true               # [true|false] Put empty-body implementations on a single line
#indent_match_arms = true                    # [true|false] Indent match arms instead of keeping them at the same indentation level as the match keyword
item_brace_style = "PreferSameLine"         # [AlwaysNextLine|PreferSameLine|SameLineWhere] Brace style for structs and enums
#match_block_trailing_comma = false          # [true|false] Put a trailing comma after a block based match arm (non-block arms are not affected)
#max_width = 100                             # (100) Maximum width of each line
#newline_style = "Unix"                      # [Native|Unix|Windows] Unix or Windows line endings
normalize_comments = true                   # [true|false] Convert /* */ comments to // comments where possible
#reorder_imported_names = false              # [true|false] Reorder lists of names in import statements alphabetically
#reorder_imports = false                     # [true|false] Reorder import statements alphabetically
#reorder_imports_in_group = false            # [true|false] Reorder import statements in group
single_line_if_else_max_width = 60          # (50) Maximum line length for single line if-else expressions.
#skip_children = false                       # [true|false] Don't reformat out of line modules
#space_after_bound_colon = true              # [true|flase] Leave a space after the colon in a trait or lifetime bound
#space_after_struct_lit_field_colon = true   # [true|false] Leave a space after the colon in a struct literal field
#space_after_type_annotation_colon = true    # [true|false] Leave a space after the colon in a type annotation
#space_before_bound = false                  # [true|false] Leave a space before the colon in a trait or lifetime bound
#space_before_struct_lit_field_colon = false # [true|false] Leave a space before the colon in a struct literal field
#space_before_type_annotation = false        # [true|false] Leave a space before the colon in a type annotation
#spaces_around_ranges = false                # [true|false] Put spaces around the .. and ... range operators
#spaces_within_angle_brackets = false        # [true|false] Put spaces within non-empty generic arguments
#spaces_within_parens = false                # [true|false] Put spaces within non-empty parentheses
#spaces_within_square_brackets = false       # [true|false] Put spaces within non-empty square brackets
#struct_lit_multiline_style = "PreferSingle" # [ForceMulti|PreferSingle] Multiline style on literal structs
#struct_lit_style = "Block"                  # [Block|Visual] Style of struct definition
#struct_lit_width = 18                       # (18) Maximum width in the body of a struct lit before falling back to vertical formatting
#struct_variant_width = 35                   # (35) Maximum width in the body of a struct variant before falling back to vertical formatting
#tab_spaces = 4                              # Number of spaces per tab
take_source_hints = true                    # [true|false]
#trailing_comma = "Vertical"                 # [Always|Never|Vertical] How to handle trailing commas for lists
#type_punctuation_density = "Wide"           # [Compressed|Wide] Determines if + or = are wrapped in spaces in the punctuation of types
use_try_shorthand = true                    # [true|false] Replace uses of the try! macro by the ? shorthand
#where_density = "CompressedIfEmpty"         # [Compressed|CompressedIfEmpty|Tall|Vertical] Density of a where clause
#where_layout = "Vertical"                   # [Horizontal|HorizontalVertical|Mixed|Vertical] Element layout inside a where clause
#where_pred_indent = "Visual"                # [Block|Visual] Indentation style of a where predicate
where_style = "Legacy"                      # [Rfc|Legacy] Overall strategy for where clauses
#wrap_comments = false                       # [true|false] Break comments to fit on the line
#wrap_match_arms = true                      # [true|false] Wrap multiline match arms in blocks
write_mode = "Overwrite"                    # (Replace) [Replace|Overwrite|Display|Diff|Coverage|Plain|Checkstyle] What Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage
